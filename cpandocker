#!/usr/bin/perl

use strict; use warnings;

use FindBin;
use JSON;

our $cfg  = {};
our $opts = cmdline_opts();
our $what = shift @ARGV;
print_usage() if !$what;
read_cfg();
{
    no strict 'refs';
    $what = "cpan_$what";
    &$what(@ARGV);
}
exit 0;


sub read_cfg {
    # our config file
    my $cpan_docker_home   = $ENV{CPAN_DOCKER_HOME}   ||= "$FindBin::Bin/";
    my $cpan_docker_cfg_fn = $ENV{CPAN_DOCKER_CONFIG} ||= "$cpan_docker_home/.cpandocker.json";
    $cfg = decode_json(do {local(@ARGV,$/)=$cpan_docker_cfg_fn;<>});
    if(($cfg->{version}//'') ne '1'){
        cpan_cfgsync();
        save_cfg();
    }

    # config/defaults
    my $perl_version = 
    $ENV{PERL_VERSION}           //= $cfg->{perl_version}            // "5.32.0";
    $ENV{DOCKER_PERL_TAG}        //= $cfg->{docker_perl_tag}         // "$perl_version";
    $ENV{DOCKER_PERL_DEV_TAG}    //= $cfg->{docker_perl_dev_tag}     // "$perl_version-dev-latest";
    $ENV{DOCKER_LOCAL}           //= $cfg->{docker_local}            // "docker_build_$ENV{USER}";
    $ENV{DOCKER_REGISTRY}        //= $cfg->{docker_registry}         // "aardbeiplantje";
    $ENV{REMOTE_DOCKER_REGISTRY} //= $cfg->{remote_docker_registry}  // $ENV{DOCKER_LOCAL};
    $ENV{DOCKER_REPOSITORY}      //= $cfg->{docker_repository}       // $ENV{DOCKER_LOCAL}.'/'.$ENV{DOCKER_REGISTRY};
    return;
}

sub get_cfg {
    my ($cpan_module) = @_;
    foreach my $cpn (@{$cfg->{cpans}//[]}){
        return $cpn if $cpn->{name} eq $cpan_module;
    }
    return
}

our $_json_enc;
sub save_cfg {
    my $cpan_docker_home   = $ENV{CPAN_DOCKER_HOME}   ||= "$FindBin::Bin/";
    my $cpan_docker_cfg_fn = $ENV{CPAN_DOCKER_CONFIG} ||= "$cpan_docker_home/.cpandocker.json";
    $_json_enc //= JSON->new->utf8->allow_blessed->allow_unknown->allow_nonref->convert_blessed->pretty;
    open(my $cfg_h, ">", $cpan_docker_cfg_fn)
        or die "Error opening $cpan_docker_cfg_fn for write: $!\n";
    print {$cfg_h} $_json_enc->encode($cfg);
    close($cfg_h)
        or die "Error opening $cpan_docker_cfg_fn for write: $!\n";
    return;
}

sub cpan_cfgsync {
    my @new_cpans;
    foreach my $cpn (@{$cfg->{cpans}//[]}){
        push @new_cpans, scalar get_cpan_information($cpn->{name});
    }
    $cfg->{cpans}   = [sort {$a->{name} cmp $b->{name}} @new_cpans];
    $cfg->{version} = 1;
    return;
}

sub cpan_list {
    foreach my $cpn (@{$cfg->{cpans}//[]}){
        print pretty_string_cpan($cpn);
    }
    return;
}

sub cpan_info {
    foreach my $cpn (@{$cfg->{cpans}//[]}){
        print pretty_string_cpan(scalar get_cpan_information($cpn->{name}));
    }
    return;
}

sub cpan_add {
    my (@cpans) = @_;
    my %cpans_to_add;
    foreach my $cpn (@cpans){
        my ($cpan_version, $tarball_version, $docker_cpan_tag) = do_cpan_docker_build($cpn);
        $cpans_to_add{$cpn} = {
            name    => $cpn,
            version => $cpan_version,
            tarball => $tarball_version, 
            tag     => [
                $docker_cpan_tag,
                "$docker_cpan_tag-$cpan_version",
            ]
        };
    }
    if(keys %cpans_to_add){
        foreach my $cpn (@{$cfg->{cpans}//[]}){
            $cpn = undef if defined $cpans_to_add{$cpn->{name}};
        }
        $cfg->{cpans} = [sort {$a->{name} cmp $b->{name}} grep {defined} @{$cfg->{cpans}//[]}, values %cpans_to_add];
        save_cfg();
    }
    return;
}

sub cpan_build {
    my (@cpans) = @_;
    foreach my $cpan_module (@cpans){
        do_cpan_docker_build($cpan_module);
    }
    return;
}

sub cpan_rebuildall {
    foreach my $cpan_module (@{$cfg->{cpans}//[]}){
        do_cpan_docker_build($cpan_module->{name});
    }
    return;
}

sub cpan_versionall {
    foreach my $cpan_module (@{$cfg->{cpans}//[]}){
        do_cpan_version_check($cpan_module);
    }
    return;
}

sub cpan_version {
    my (@cpans) = @_;
    foreach my $cpan_module (@cpans){
        do_cpan_version_check(get_cfg($cpan_module));
    }
    return;
}

sub cpan_pushall {
    foreach my $cpan_module (@{$cfg->{cpans}//[]}){
        do_cpan_docker_push($cpan_module->{name});
    }
    return;
}

sub cpan_push {
    my (@cpans) = @_;
    foreach my $cpan_module (@cpans){
        do_cpan_docker_push($cpan_module);
    }
    return;
}

sub do_cpan_docker_push {
    my ($cpan_to_push) = @_;
    # FIXME: implement!
    return;
}

sub pretty_string_cpan {
    my ($cpn) = @_;
    return sprintf "%-25s %6s  %-50s %-50s\n", "[$cpn->{name}]", $cpn->{version}, $cpn->{tarball}, join(',', @{$cpn->{tag}//[]});
}

sub get_cpan_information {
    my ($cpan_to_add) = @_;
    my @cpan_details = `cpan -D $cpan_to_add`;
    my ($tarball_version, $cpan_version);
    while(defined(my $l = shift @cpan_details)){
        print STDERR $l;
        if($l =~ /CPAN:\s+(\S+)\s+/){
            $cpan_version = $1;
            next
        }
        if($l =~ /(\S+\.(?:tar\.gz|tgz))/){
            $tarball_version = $1;
            next
        }
    }
    die "No cpan $cpan_to_add found\n"
        unless $tarball_version and $cpan_version;
    my $docker_cpan_tag = lc($cpan_to_add =~ s/::/-/gr);
    return wantarray?($cpan_to_add, $cpan_version, $tarball_version, $docker_cpan_tag):{
        name    => $cpan_to_add,
        version => $cpan_version,
        tarball => $tarball_version, 
        tag     => [
            $docker_cpan_tag,
            "$docker_cpan_tag-$cpan_version",
        ]
    }
}

sub do_cpan_version_check {
    my ($cpn) = @_;
    local ($!,$?);
    my $tdir = "/tmp/cpan_test_${$}_$ENV{USER}";
    mkdir($tdir) or die "Error making dir $tdir: $!\n";
    print STDERR "using $tdir/Dockerfile\n";
    $! = 0;

    # Dockerfile
    my $docker_cpan_ref = "$ENV{DOCKER_REPOSITORY}/perl:cpan-$cpn->{tag}[1]";
    my $perl_version    = $ENV{PERL_VERSION};
    my $tmpdockername   = "tmpperlcpanapp-$$-$ENV{USER}-".lc($cpn->{name} =~ s/::/-/gr);
    my $docker_fn       = "$tdir/Dockerfile";
    open(my $d_fh, '>', $docker_fn)
        or die "Error opening $docker_fn: $!\n";
    print {$d_fh} <<EOdockerfile;
FROM $ENV{DOCKER_REGISTRY}/perl:$ENV{DOCKER_PERL_TAG} as tmpapp-01
FROM $ENV{DOCKER_REGISTRY}/perl:cpan-$cpn->{tag}[0]   as tmpapp-02
FROM scratch
COPY --from=tmpapp-01 / /
COPY --from=tmpapp-02 / /
ENTRYPOINT ["/opt/bin/perl"]
EOdockerfile
    $! = 0;
    system("docker build $tdir -f $tdir/Dockerfile --tag $tmpdockername")
        == 0 or die "problem building the $tmpdockername, quitting: $!\n";
    $! = 0;
    system("docker run --rm -it $tmpdockername -M$cpn->{name} -we 'print \"[$cpn->{name}] VERSION: \$".$cpn->{name}."::VERSION\\n\"'")
        == 0 or die pretty_string_cpan($cpn)." FAILED: $!\n";
    $! = 0;
    system("docker image rm -f $tmpdockername")
        == 0 or die "problem removing temp $tmpdockername: $!\n";
    unlink $docker_fn;
    rmdir $tdir;
    return;
}

sub do_cpan_docker_build {
    my ($cpan_to_add) = @_;
    # get some details
    my ($_d, $cpan_version, $tarball_version, $docker_cpan_tag) = get_cpan_information($cpan_to_add);
    print STDERR "will tag the docker image for $cpan_to_add with $docker_cpan_tag-$cpan_version\n";

    # build docker via make?
    my $d_dir = "$FindBin::Bin/dockers/perl:cpan-$docker_cpan_tag";
    print STDERR "checking for $d_dir\n";
    if(-d $d_dir){
        local $ENV{LATEST_TAG} = "-$cpan_version";
        system("make -C $FindBin::Bin build_docker.perl:cpan-$docker_cpan_tag") == 0
            or die $!;
    } else {
        build_cpan_docker($cpan_to_add, $docker_cpan_tag, $tarball_version, $cpan_version);
    }

    # put extra tags
    system("docker tag $ENV{DOCKER_REPOSITORY}/perl:cpan-$docker_cpan_tag-$cpan_version ".
                      "$ENV{DOCKER_REPOSITORY}/perl:cpan-$docker_cpan_tag") == 0 or die $!;
    system("docker tag $ENV{DOCKER_REPOSITORY}/perl:cpan-$docker_cpan_tag-$cpan_version ".
                      "$ENV{DOCKER_REGISTRY}/perl:cpan-$docker_cpan_tag") == 0 or die $!;

    return ($cpan_version, $tarball_version, $docker_cpan_tag);
}

sub build_cpan_docker {
    my ($cpan_to_add, $docker_cpan_tag, $tarball_version, $cpan_version) = @_;

    # make a temp dir + Dockerfile
    my $tdir = "/tmp/dockerize_cpan_${$}_$ENV{USER}";
    mkdir($tdir) or die "Error making dir $tdir: $!\n";
    print STDERR "using $tdir/Dockerfile\n";

    # Dockerfile
    my $perl_version = $ENV{PERL_VERSION};
    my $docker_fn = "$tdir/Dockerfile";
    open(my $d_fh, '>', $docker_fn)
        or die "Error opening $docker_fn: $!\n";
    print {$d_fh} <<EOdockerfile;
# start from the perl-dev docker
FROM $ENV{DOCKER_REGISTRY}/perl:$ENV{DOCKER_PERL_DEV_TAG} as my-perl-d

# set some ENV vars, to be sure. Also, we will build in /newopt
# so PERL5LIB has to contain that
ENV LD_LIBRARY_PATH=/opt/lib64:/opt/lib:/opt/lib/perl5/$perl_version/x86_64/CORE
# see cpan_config.pl for DESTDIR/INSTALL_BASE/PERL5LIB!! Add trailing slash (/)!!
ENV DESTDIR=/newopt/
ENV INSTALL_BASE=" DESTDIR=\$DESTDIR"
ENV PERL5LIB=\\
\$DESTDIR/opt/site_perl/lib/perl5:\\
\$DESTDIR/opt/site_perl/lib/perl5/site_perl/auto:\\
\$DESTDIR/opt/site_perl/lib/perl5/site_perl/$perl_version:\\
\$DESTDIR/opt/site_perl/lib/perl5/site_perl/$perl_version/x86_64-linux:\\
\$DESTDIR/opt/site_perl/lib/perl5/site_perl/$perl_version/x86_64-linux/auto:\\
/opt/lib/perl5:\\
/opt/lib/perl5/site_perl:\\
/opt/lib/perl5/site_perl/auto:\\
/opt/lib/perl5/site_perl/$perl_version/:\\
/opt/lib/perl5/site_perl/$perl_version/auto:\\
/opt/lib/perl5/site_perl/$perl_version/x86_64:\\
/opt/lib/perl5/site_perl/$perl_version/x86_64/auto:\\
/opt/lib/perl5/auto:\\
/opt/lib/perl5/$perl_version:\\
/opt/lib/perl5/$perl_version/auto:\\
/opt/lib/perl5/$perl_version/x86_64:\\
/opt/lib/perl5/$perl_version/x86_64/auto

# actually run cpan install
RUN /opt/bin/perl /opt/bin/cpan -j /tmp/cpan_config.pl -Ti \\
    $tarball_version \\
    ; rm -rf \$DESTDIR/opt/site_perl/share                     \\
    ; rm -rf \$DESTDIR/opt/site_perl/man                       \\
    ; rm -rf \$DESTDIR/opt/lib                                 \\
    ; find   \$DESTDIR/ -type f -name '.packlist' |xargs rm -f \\
    ; find   \$DESTDIR/ -type f -name '.pc'       |xargs rm -f \\
    ; find   \$DESTDIR/ -type f -name '.h'        |xargs rm -f \\
    ; find   \$DESTDIR/ -type f -name '.pod'      |xargs rm -f \\
    ; exit 0
# and a simple test
RUN /opt/bin/perl -M$cpan_to_add -we 'print "[OK] CPAN TEST 1 ${cpan_to_add} built, version: \$${cpan_to_add}::VERSION\\n"'

# start a new scratch with runtime perl and move to / just to test (without PERL5LIB set!)
FROM $ENV{DOCKER_REGISTRY}/perl:$ENV{DOCKER_PERL_TAG} as test-perl-cpan
FROM scratch
COPY --from=my-perl-d /newopt/opt/ /
COPY --from=test-perl-cpan / /
ENV DESTDIR=
ENV INSTALL_BASE=
ENV LD_LIBRARY_PATH=
ENV PERL5LIB=
RUN /opt/bin/perl -M$cpan_to_add -we 'print "[OK] CPAN TEST 2 ${cpan_to_add} built, version: \$${cpan_to_add}::VERSION\\n"'

# test ok, so squash for push
FROM scratch
COPY --from=my-perl-d /newopt/opt/ /

EOdockerfile
    close($d_fh)
        or die "Error closing $docker_fn: $!\n";

    # run docker build
    local ($!,$?);
    system(
         "docker build $tdir -f $tdir/Dockerfile"
        ." --cache-from $ENV{DOCKER_REPOSITORY}/perl:cpan-$docker_cpan_tag-$cpan_version"
        ." --tag $ENV{DOCKER_REPOSITORY}/perl:cpan-$docker_cpan_tag-$cpan_version"
        ." --tag $ENV{DOCKER_REGISTRY}/perl:cpan-$docker_cpan_tag-$cpan_version"
    ) == 0 or die "problem building the docker, quitting: $!\n";

    unlink $docker_fn;
    rmdir $tdir;
    return;
}

sub show_usage {
    my ($opts) = @_;
    print_usage() if $opts->{help};
    if($opts->{man}){
        local $ENV{PAGER} = $ENV{PAGER}||'less';
        load_cpan('FindBin')->again();
        load_cpan('Pod::Usage');
        Pod::Usage::pod2usage(-exitval => 1, -verbose => 2, -input => "$FindBin::Bin/$FindBin::Script");
    }
    return;
}

sub print_usage {
    local $ENV{PAGER} = $ENV{PAGER}||'less';
    load_cpan('FindBin')->again();
    load_cpan('Pod::Usage');
    Pod::Usage::pod2usage(-exitval => 0, -verbose => 1, -input => "$FindBin::Bin/$FindBin::Script");
    return;
}

sub load_cpan {
    eval "require $_[0]";
    die $@ if $@;
    return $_[0];
}

sub cmdline_opts {
    load_cpan('Getopt::Long');
    Getopt::Long::Configure('pass_through', 'no_ignore_case', 'bundling', 'no_auto_abbrev');
    Getopt::Long::GetOptions(my $opts = {}, "cfg=s", "help|h|?!", "man|m!") or pod2usage(1);
    show_usage($opts) if $opts->{man} or $opts->{help};
    return $opts;
}

__END__
=pod

=head1 NAME

cpandocker - easy cpan docker image maintain utility

=head1 SYNOPSIS

B<cpandocker> B<[OPTIONS]> B<action> B<[cpan]> B<[cpan, ...]>

=head1 DESCRIPTION

This is the cpandocker tool that allows to make a perl sandbox and maintain
what cpan modules are in there via a configuration file. The configuration file
location and/or cpandocker home can be specified on command line.

cpandocker acts as a wrapper around docker. Building is done with the
aardbeiplantje/perl and aardbeiplantje/perl:5.32.0-dev-latest docker images.

=head1 OPTIONS

=over 4

=item B<help|h|?>

Show the usage information.

=item B<man|m>

Show the manpage.

=back

=head1 ARGUMENTS

=over 4

=item B<action>

What to do for the list of cpan modules on the command line. Note that there
doesn't have to be a cpan module specified, as there are actions that just list
or manage the F<.cpandocker.json> config file.

=over 2

=item * list

list what cpan modules are dockerized as configuration.

=item * cfgsync

fetch the latest information from cpan and sync this with the config.

=item * info

fetch the cpan information from cpan for the modules that are added to the
configuration

=item * add

add a cpan module, note that this also allows upgrading

=item * build

just build a module, don't add it to the configuration

=item * rebuildall

rebuild all cpans that are configured

=item * version

show the version of a configured cpan, this also acts as a perl module load check

=item * versionall

show the version for all configured cpans, this also acts as a perl module load
check for all modules that are configured.

=item * push

push a configured and build module to the remote docker repository

=item * pushall

push all cpans that are configured to the remote docker repository

=back

=item B<cpan>

The cpan module to execute the action for

=back

=head1 SEE ALSO

L<docker(1)>, L<perl(1)>, L<cpan(1)>.

=head1 AUTHORS

CowboyTim <aardbeiplantje@gmail.com>

=head1 REPORT BUGS

github L<https://github.com/CowboyTim/perl-docker/issues>

=cut
